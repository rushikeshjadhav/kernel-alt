From 1d8051e59e1641ccfe52efb1fe0cc6a54e6159ae Mon Sep 17 00:00:00 2001
From: Author Redacted <security@xen.org>
Date: Wed, 9 Dec 2020 12:52:17 +0000
Subject: [PATCH 6/6] xenbus/xenbus_backend: Disallow pending watch messages

'xenbus_backend' watches 'state' of devices, which is writable by
guests.  Hence, if guests intensively updates it, dom0 will have lots of
pending events that exhausting memory of dom0.  In other words, guests
can trigger dom0 memory pressure.  This is known as XSA-349.  However,
the watch callback of it, 'frontend_changed()', reads only 'state', so
doesn't need to have the pending events.

To avoid the problem, this commit disallows pending watch messages for
'xenbus_backend' using the 'will_handle()' watch callback.

Signed-off-by: Author Redacted <security@xen.org>
Reviewed-by: Juergen Gross <jgross@suse.com>
diff --git a/drivers/xen/xenbus/xenbus_probe_backend.c b/drivers/xen/xenbus/xenbus_probe_backend.c
index b0bed4faf44c..28d53d942ccf 100644
--- a/drivers/xen/xenbus/xenbus_probe_backend.c
+++ b/drivers/xen/xenbus/xenbus_probe_backend.c
@@ -45,6 +45,7 @@
 #include <linux/mm.h>
 #include <linux/notifier.h>
 #include <linux/export.h>
+#include <linux/shadow_var.h>
 
 #include <asm/page.h>
 #include <asm/pgtable.h>
@@ -180,6 +181,18 @@ static int xenbus_probe_backend(struct xen_bus_type *bus, const char *type,
 	return err;
 }
 
+static bool frontend_will_handle(struct xenbus_watch *watch,
+				 const char *path, const char *token)
+{
+	struct xenbus_watch_extra *extra = shadow_var_get(watch, "extra");
+	unsigned int nr_pending = 0;
+
+	if (extra)
+		nr_pending = extra->nr_pending;
+
+	return nr_pending == 0;
+}
+
 static void frontend_changed(struct xenbus_watch *watch,
 			     const char *path, const char *token)
 {
@@ -254,6 +267,7 @@ static int __init xenbus_probe_backend_init(void)
 		.notifier_call = backend_probe_and_watch
 	};
 	int err;
+	struct xen_bus_type_extra *extra;
 
 	DPRINTK("");
 
@@ -262,6 +276,13 @@ static int __init xenbus_probe_backend_init(void)
 	if (err)
 		return err;
 
+	extra = shadow_var_alloc(&xenbus_backend, "extra", sizeof(*extra),
+				    GFP_KERNEL);
+	if (!extra)
+		pr_alert("Couldn't enable XSA-349 mitigation!\n");
+	else
+		extra->otherend_will_handle = frontend_will_handle;
+
 	register_xenstore_notifier(&xenstore_notifier);
 
 	return 0;
