From 21c9d0a4c019e6193a8e2c958e884fc81305b21f Mon Sep 17 00:00:00 2001
From: Author Redacted <security@xen.org>
Date: Tue, 8 Dec 2020 16:41:31 +0000
Subject: [PATCH 2/6] xen/xenbus: Allow watches discard events before queueing

If handling logics of watch events are slower than the events enqueue
logic and the events can be created from the guests, the guests could
trigger memory pressure by intensively inducing the events, because it
will create a huge number of pending events that exhausting the memory.
This is known as XSA-349.

Fortunately, some watch events could be ignored, depending on its
handler callback.  For example, if the callback has interest in only one
single path, the watch wouldn't want multiple pending events.  Or, some
watches could ignore events to same path.

To let such watches to volutarily help avoiding the memory pressure
situation, this commit introduces new watch callback, 'will_handle'.  If
it is not NULL, it will be called for each new event just before
enqueuing it.  Then, if the callback returns false, the event will be
discarded.  No watch is using the callback for now, though.

Signed-off-by: Author Redacted <security@xen.org>
Reviewed-by: Juergen Gross <jgross@suse.com>
---
 drivers/net/xen-netback/xenbus.c   | 28 ++++++++++++++++++++++++++++
 drivers/xen/xenbus/xenbus_client.c |  5 +++++
 drivers/xen/xenbus/xenbus_xs.c     | 22 ++++++++++++++++++----
 include/xen/xenbus.h               |  9 +++++++++
 4 files changed, 60 insertions(+), 4 deletions(-)

diff --git a/drivers/net/xen-netback/xenbus.c b/drivers/net/xen-netback/xenbus.c
index cd51492ae6c2..f4074e8e803a 100644
--- a/drivers/net/xen-netback/xenbus.c
+++ b/drivers/net/xen-netback/xenbus.c
@@ -21,6 +21,7 @@
 #include "common.h"
 #include <linux/vmalloc.h>
 #include <linux/rtnetlink.h>
+#include <linux/shadow_var.h>
 
 struct backend_info {
 	struct xenbus_device *dev;
@@ -768,6 +769,7 @@ static int xen_register_credit_watch(struct xenbus_device *dev,
 	int err = 0;
 	char *node;
 	unsigned maxlen = strlen(dev->nodename) + sizeof("/rate");
+	struct xenbus_watch_extra *extra;
 
 	if (vif->credit_watch.node)
 		return -EADDRINUSE;
@@ -775,8 +777,18 @@ static int xen_register_credit_watch(struct xenbus_device *dev,
 	node = kmalloc(maxlen, GFP_KERNEL);
 	if (!node)
 		return -ENOMEM;
+
+	extra = shadow_var_alloc(&vif->credit_watch, "extra", sizeof(*extra),
+				    GFP_KERNEL);
+	if (!extra)
+	{
+		kfree(node);
+		return -ENOMEM;
+	}
+
 	snprintf(node, maxlen, "%s/rate", dev->nodename);
 	vif->credit_watch.node = node;
+	extra->will_handle = NULL;
 	vif->credit_watch.callback = xen_net_rate_changed;
 	err = register_xenbus_watch(&vif->credit_watch);
 	if (err) {
@@ -784,6 +796,7 @@ static int xen_register_credit_watch(struct xenbus_device *dev,
 		kfree(node);
 		vif->credit_watch.node = NULL;
 		vif->credit_watch.callback = NULL;
+		shadow_var_free(&vif->credit_watch, "extra");
 	}
 	return err;
 }
@@ -794,6 +807,7 @@ static void xen_unregister_credit_watch(struct xenvif *vif)
 		unregister_xenbus_watch(&vif->credit_watch);
 		kfree(vif->credit_watch.node);
 		vif->credit_watch.node = NULL;
+		shadow_var_free(&vif->credit_watch, "extra");
 	}
 }
 
@@ -815,6 +829,7 @@ static int xen_register_mcast_ctrl_watch(struct xenbus_device *dev,
 	char *node;
 	unsigned maxlen = strlen(dev->otherend) +
 		sizeof("/request-multicast-control");
+	struct xenbus_watch_extra *extra;
 
 	if (vif->mcast_ctrl_watch.node) {
 		pr_err_ratelimited("Watch is already registered\n");
@@ -826,9 +841,20 @@ static int xen_register_mcast_ctrl_watch(struct xenbus_device *dev,
 		pr_err("Failed to allocate memory for watch\n");
 		return -ENOMEM;
 	}
+
+	extra = shadow_var_alloc(&vif->mcast_ctrl_watch, "extra",
+				    sizeof(*extra), GFP_KERNEL);
+	if (!extra)
+	{
+		kfree(node);
+		pr_err("Failed to allocate memory for watch\n");
+		return -ENOMEM;
+	}
+
 	snprintf(node, maxlen, "%s/request-multicast-control",
 		 dev->otherend);
 	vif->mcast_ctrl_watch.node = node;
+	extra->will_handle = NULL;
 	vif->mcast_ctrl_watch.callback = xen_mcast_ctrl_changed;
 	err = register_xenbus_watch(&vif->mcast_ctrl_watch);
 	if (err) {
@@ -836,6 +862,7 @@ static int xen_register_mcast_ctrl_watch(struct xenbus_device *dev,
 		       vif->mcast_ctrl_watch.node);
 		kfree(node);
 		vif->mcast_ctrl_watch.node = NULL;
+		shadow_var_free(&vif->mcast_ctrl_watch, "extra");
 		vif->mcast_ctrl_watch.callback = NULL;
 	}
 	return err;
@@ -847,6 +874,7 @@ static void xen_unregister_mcast_ctrl_watch(struct xenvif *vif)
 		unregister_xenbus_watch(&vif->mcast_ctrl_watch);
 		kfree(vif->mcast_ctrl_watch.node);
 		vif->mcast_ctrl_watch.node = NULL;
+		shadow_var_free(&vif->mcast_ctrl_watch, "extra");
 	}
 }
 
diff --git a/drivers/xen/xenbus/xenbus_client.c b/drivers/xen/xenbus/xenbus_client.c
index e94a61eaeceb..a75487c01c52 100644
--- a/drivers/xen/xenbus/xenbus_client.c
+++ b/drivers/xen/xenbus/xenbus_client.c
@@ -36,6 +36,7 @@
 #include <linux/spinlock.h>
 #include <linux/vmalloc.h>
 #include <linux/export.h>
+#include <linux/shadow_var.h>
 #include <asm/xen/hypervisor.h>
 #include <xen/page.h>
 #include <xen/interface/xen.h>
@@ -118,8 +119,12 @@ int xenbus_watch_path(struct xenbus_device *dev, const char *path,
 				       const char *, const char *))
 {
 	int err;
+	struct xenbus_watch_extra *extra;
 
 	watch->node = path;
+	extra = shadow_var_get(watch, "extra");
+	if (extra)
+		extra->will_handle = NULL;
 	watch->callback = callback;
 
 	err = register_xenbus_watch(watch);
diff --git a/drivers/xen/xenbus/xenbus_xs.c b/drivers/xen/xenbus/xenbus_xs.c
index 49a3874ae6bb..5062530cecee 100644
--- a/drivers/xen/xenbus/xenbus_xs.c
+++ b/drivers/xen/xenbus/xenbus_xs.c
@@ -46,6 +46,7 @@
 #include <linux/reboot.h>
 #include <linux/rwsem.h>
 #include <linux/mutex.h>
+#include <linux/shadow_var.h>
 #include <asm/xen/hypervisor.h>
 #include <xen/xenbus.h>
 #include <xen/xen.h>
@@ -690,6 +691,8 @@ static struct xenbus_watch *find_watch(const char *token)
 
 int xs_watch_msg(struct xs_watch_event *event)
 {
+	struct xenbus_watch_extra *extra;
+
 	if (count_strings(event->body, event->len) != 2) {
 		kfree(event);
 		return -EINVAL;
@@ -699,11 +702,22 @@ int xs_watch_msg(struct xs_watch_event *event)
 
 	spin_lock(&watches_lock);
 	event->handle = find_watch(event->token);
+	extra = shadow_var_get(event->handle, "extra");
 	if (event->handle != NULL) {
-		spin_lock(&watch_events_lock);
-		list_add_tail(&event->list, &watch_events);
-		wake_up(&watch_events_waitq);
-		spin_unlock(&watch_events_lock);
+		if (extra && extra->will_handle &&
+		    !extra->will_handle(event->handle, event->path,
+					event->token))
+		{
+			/* Ignore the event */
+			kfree(event);
+		}
+		else
+		{
+			spin_lock(&watch_events_lock);
+			list_add_tail(&event->list, &watch_events);
+			wake_up(&watch_events_waitq);
+			spin_unlock(&watch_events_lock);
+		}
 	} else
 		kfree(event);
 	spin_unlock(&watches_lock);
diff --git a/include/xen/xenbus.h b/include/xen/xenbus.h
index 869c816d5f8c..cfca952425b7 100644
--- a/include/xen/xenbus.h
+++ b/include/xen/xenbus.h
@@ -64,6 +64,15 @@ struct xenbus_watch
 			 const char *path, const char *token);
 };
 
+struct xenbus_watch_extra
+{
+	/*
+	 * Called just before enqueing new event while a spinlock is held.
+	 * The event will be discarded if this callback returns false.
+	 */
+	bool (*will_handle)(struct xenbus_watch *,
+			      const char *path, const char *token);
+};
 
 /* A xenbus device. */
 struct xenbus_device {
-- 
2.17.1

