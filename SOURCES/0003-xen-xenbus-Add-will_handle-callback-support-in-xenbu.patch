From 83e1da0058c6f91f8d623987cd1dc8a7472789ee Mon Sep 17 00:00:00 2001
From: Author Redacted <security@xen.org>
Date: Tue, 8 Dec 2020 17:42:09 +0000
Subject: [PATCH 3/6] xen/xenbus: Add 'will_handle' callback support in
 xenbus_watch_path()

Some code does not directly make 'xenbus_watch' object and call
'register_xenbus_watch()' but use 'xenbus_watch_path()' instead.  This
commit adds support of 'will_handle' callback in the
'xenbus_watch_path()' and it's wrapper, 'xenbus_watch_pathfmt()'.

Signed-off-by: Author Redacted <security@xen.org>
Reviewed-by: Juergen Gross <jgross@suse.com>
---
 drivers/block/xen-blkback/xenbus.c |  3 +-
 drivers/net/xen-netback/xenbus.c   |  2 +-
 drivers/xen/xen-pciback/xenbus.c   |  4 +--
 drivers/xen/xenbus/xenbus_client.c | 45 ++++++++++++++++++++++++++++--
 drivers/xen/xenbus/xenbus_probe.c  |  6 ++--
 include/xen/xenbus.h               | 14 ++++++++++
 6 files changed, 64 insertions(+), 10 deletions(-)

diff --git a/drivers/block/xen-blkback/xenbus.c b/drivers/block/xen-blkback/xenbus.c
index e90194fa9426..e34c6ce8de0c 100644
--- a/drivers/block/xen-blkback/xenbus.c
+++ b/drivers/block/xen-blkback/xenbus.c
@@ -684,7 +684,8 @@ static int xen_blkbk_probe(struct xenbus_device *dev,
 	/* setup back pointer */
 	be->blkif->be = be;
 
-	err = xenbus_watch_pathfmt(dev, &be->backend_watch, backend_changed,
+	err = xenbus_watch_pathfmt_abi(dev, &be->backend_watch, NULL,
+				   backend_changed,
 				   "%s/%s", dev->nodename, "physical-device");
 	if (err)
 		goto fail;
diff --git a/drivers/net/xen-netback/xenbus.c b/drivers/net/xen-netback/xenbus.c
index f4074e8e803a..d4b6bb3f78c4 100644
--- a/drivers/net/xen-netback/xenbus.c
+++ b/drivers/net/xen-netback/xenbus.c
@@ -1067,7 +1067,7 @@ static void connect(struct backend_info *be)
 	xenvif_carrier_on(be->vif);
 
 	unregister_hotplug_status_watch(be);
-	err = xenbus_watch_pathfmt(dev, &be->hotplug_status_watch,
+	err = xenbus_watch_pathfmt_abi(dev, &be->hotplug_status_watch, NULL,
 				   hotplug_status_changed,
 				   "%s/%s", dev->nodename, "hotplug-status");
 	if (!err)
diff --git a/drivers/xen/xen-pciback/xenbus.c b/drivers/xen/xen-pciback/xenbus.c
index 3bbed47da3fa..0850873de41c 100644
--- a/drivers/xen/xen-pciback/xenbus.c
+++ b/drivers/xen/xen-pciback/xenbus.c
@@ -687,8 +687,8 @@ static int xen_pcibk_xenbus_probe(struct xenbus_device *dev,
 		goto out;
 
 	/* watch the backend node for backend configuration information */
-	err = xenbus_watch_path(dev, dev->nodename, &pdev->be_watch,
-				xen_pcibk_be_watch);
+	err = xenbus_watch_path_abi(dev, dev->nodename, &pdev->be_watch,
+				    NULL, xen_pcibk_be_watch);
 	if (err)
 		goto out;
 
diff --git a/drivers/xen/xenbus/xenbus_client.c b/drivers/xen/xenbus/xenbus_client.c
index a75487c01c52..0048d620a4e8 100644
--- a/drivers/xen/xenbus/xenbus_client.c
+++ b/drivers/xen/xenbus/xenbus_client.c
@@ -117,6 +117,18 @@ int xenbus_watch_path(struct xenbus_device *dev, const char *path,
 		      struct xenbus_watch *watch,
 		      void (*callback)(struct xenbus_watch *,
 				       const char *, const char *))
+{
+	return xenbus_watch_path_abi(dev, path, watch, NULL, callback);
+}
+EXPORT_SYMBOL_GPL(xenbus_watch_path);
+
+
+int xenbus_watch_path_abi(struct xenbus_device *dev, const char *path,
+			  struct xenbus_watch *watch,
+			  bool (*will_handle)(struct xenbus_watch *,
+					      const char *, const char *),
+			  void (*callback)(struct xenbus_watch *,
+					   const char *, const char *))
 {
 	int err;
 	struct xenbus_watch_extra *extra;
@@ -124,21 +136,21 @@ int xenbus_watch_path(struct xenbus_device *dev, const char *path,
 	watch->node = path;
 	extra = shadow_var_get(watch, "extra");
 	if (extra)
-		extra->will_handle = NULL;
+		extra->will_handle = will_handle;
 	watch->callback = callback;
 
 	err = register_xenbus_watch(watch);
 
 	if (err) {
 		watch->node = NULL;
+		if (extra)
+			extra->will_handle = NULL;
 		watch->callback = NULL;
 		xenbus_dev_fatal(dev, err, "adding watch on %s", path);
 	}
 
 	return err;
 }
-EXPORT_SYMBOL_GPL(xenbus_watch_path);
-
 
 /**
  * xenbus_watch_pathfmt - register a watch on a sprintf-formatted path
@@ -181,6 +193,33 @@ int xenbus_watch_pathfmt(struct xenbus_device *dev,
 }
 EXPORT_SYMBOL_GPL(xenbus_watch_pathfmt);
 
+int xenbus_watch_pathfmt_abi(struct xenbus_device *dev,
+			     struct xenbus_watch *watch,
+			     bool (*will_handle)(struct xenbus_watch *,
+						 const char *, const char *),
+			     void (*callback)(struct xenbus_watch *,
+					      const char *, const char *),
+			     const char *pathfmt, ...)
+{
+	int err;
+	va_list ap;
+	char *path;
+
+	va_start(ap, pathfmt);
+	path = kvasprintf(GFP_NOIO | __GFP_HIGH, pathfmt, ap);
+	va_end(ap);
+
+	if (!path) {
+		xenbus_dev_fatal(dev, -ENOMEM, "allocating path for watch");
+		return -ENOMEM;
+	}
+	err = xenbus_watch_path_abi(dev, path, watch, will_handle, callback);
+
+	if (err)
+		kfree(path);
+	return err;
+}
+
 static void xenbus_switch_fatal(struct xenbus_device *, int, int,
 				const char *, ...);
 
diff --git a/drivers/xen/xenbus/xenbus_probe.c b/drivers/xen/xenbus/xenbus_probe.c
index 5b471889d723..a6e6ddd6b051 100644
--- a/drivers/xen/xenbus/xenbus_probe.c
+++ b/drivers/xen/xenbus/xenbus_probe.c
@@ -135,9 +135,9 @@ static int watch_otherend(struct xenbus_device *dev)
 	struct xen_bus_type *bus =
 		container_of(dev->dev.bus, struct xen_bus_type, bus);
 
-	return xenbus_watch_pathfmt(dev, &dev->otherend_watch,
-				    bus->otherend_changed,
-				    "%s/%s", dev->otherend, "state");
+	return xenbus_watch_pathfmt_abi(dev, &dev->otherend_watch,
+					NULL, bus->otherend_changed,
+					"%s/%s", dev->otherend, "state");
 }
 
 
diff --git a/include/xen/xenbus.h b/include/xen/xenbus.h
index cfca952425b7..c6c463f8c2d4 100644
--- a/include/xen/xenbus.h
+++ b/include/xen/xenbus.h
@@ -203,11 +203,25 @@ int xenbus_watch_path(struct xenbus_device *dev, const char *path,
 		      struct xenbus_watch *watch,
 		      void (*callback)(struct xenbus_watch *,
 				       const char *, const char *));
+int xenbus_watch_path_abi(struct xenbus_device *dev, const char *path,
+			  struct xenbus_watch *watch,
+			  bool (*will_handle)(struct xenbus_watch *,
+					      const char *, const char *),
+			  void (*callback)(struct xenbus_watch *,
+					   const char *, const char *));
 __printf(4, 5)
 int xenbus_watch_pathfmt(struct xenbus_device *dev, struct xenbus_watch *watch,
 			 void (*callback)(struct xenbus_watch *,
 					  const char *, const char *),
 			 const char *pathfmt, ...);
+__printf(5, 6)
+int xenbus_watch_pathfmt_abi(struct xenbus_device *dev,
+			     struct xenbus_watch *watch,
+			     bool (*will_handle)(struct xenbus_watch *,
+						 const char *, const char *),
+			     void (*callback)(struct xenbus_watch *,
+					      const char *, const char *),
+			     const char *pathfmt, ...);
 
 int xenbus_switch_state(struct xenbus_device *dev, enum xenbus_state new_state);
 int xenbus_grant_ring(struct xenbus_device *dev, void *vaddr,
-- 
2.17.1

