From e23232bc66595cf47824a37a715fef012497371e Mon Sep 17 00:00:00 2001
From: Author Redacted <security@xen.org>
Date: Wed, 9 Dec 2020 12:02:22 +0000
Subject: [PATCH 5/6] xen/xenbus: Count pending messages for each watch

This commit adds a counter of pending messages for each watch in the
struct.  It is used to skip unnecessary pending messages lookup in
'unregister_xenbus_watch()'.  It could also be used in 'will_handle'
callback.

Signed-off-by: Author Redacted <security@xen.org>
Reviewed-by: Juergen Gross <jgross@suse.com>
---
 drivers/xen/xenbus/xenbus_xs.c | 23 +++++++++++++++++------
 include/xen/xenbus.h           |  2 ++
 2 files changed, 19 insertions(+), 6 deletions(-)

diff --git a/drivers/xen/xenbus/xenbus_xs.c b/drivers/xen/xenbus/xenbus_xs.c
index 5062530cecee..b41661bdb479 100644
--- a/drivers/xen/xenbus/xenbus_xs.c
+++ b/drivers/xen/xenbus/xenbus_xs.c
@@ -715,6 +715,8 @@ int xs_watch_msg(struct xs_watch_event *event)
 		{
 			spin_lock(&watch_events_lock);
 			list_add_tail(&event->list, &watch_events);
+			if (extra)
+				extra->nr_pending++;
 			wake_up(&watch_events_waitq);
 			spin_unlock(&watch_events_lock);
 		}
@@ -770,9 +772,14 @@ int register_xenbus_watch(struct xenbus_watch *watch)
 	/* Pointer in ascii is the token. */
 	char token[sizeof(watch) * 2 + 1];
 	int err;
+	struct xenbus_watch_extra *extra;
 
 	sprintf(token, "%lX", (long)watch);
 
+	extra = shadow_var_get(watch, "extra");
+	if (extra)
+		extra->nr_pending = 0;
+
 	down_read(&xs_watch_rwsem);
 
 	spin_lock(&watches_lock);
@@ -873,8 +880,8 @@ void xs_suspend_cancel(void)
 
 static int xenwatch_thread(void *unused)
 {
-	struct list_head *ent;
 	struct xs_watch_event *event;
+	struct xenbus_watch_extra *extra;
 
 	xenwatch_pid = current->pid;
 
@@ -888,13 +895,17 @@ static int xenwatch_thread(void *unused)
 		mutex_lock(&xenwatch_mutex);
 
 		spin_lock(&watch_events_lock);
-		ent = watch_events.next;
-		if (ent != &watch_events)
-			list_del(ent);
+		event = list_first_entry_or_null(&watch_events,
+				struct xs_watch_event, list);
+		if (event) {
+			list_del(&event->list);
+			extra = shadow_var_get(event->handle, "extra");
+			if (extra)
+				extra->nr_pending--;
+		}
 		spin_unlock(&watch_events_lock);
 
-		if (ent != &watch_events) {
-			event = list_entry(ent, struct xs_watch_event, list);
+		if (event) {
 			event->handle->callback(event->handle, event->path,
 						event->token);
 			kfree(event);
diff --git a/include/xen/xenbus.h b/include/xen/xenbus.h
index c6c463f8c2d4..413a80140b22 100644
--- a/include/xen/xenbus.h
+++ b/include/xen/xenbus.h
@@ -66,6 +66,8 @@ struct xenbus_watch
 
 struct xenbus_watch_extra
 {
+	unsigned int nr_pending;
+
 	/*
 	 * Called just before enqueing new event while a spinlock is held.
 	 * The event will be discarded if this callback returns false.
-- 
2.17.1

