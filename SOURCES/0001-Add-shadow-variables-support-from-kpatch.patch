From 65b8fa9d13e7d3d0955b75db365c87795616dc61 Mon Sep 17 00:00:00 2001
From: Sergey Dyasli <sergey.dyasli@citrix.com>
Date: Tue, 8 Dec 2020 15:56:33 +0000
Subject: [PATCH 1/6] Add shadow variables support from kpatch

And rename them to avoid name conflicts with the original kpatch ones.

Signed-off-by: Sergey Dyasli <sergey.dyasli@citrix.com>
---
 include/linux/shadow_var.h |  11 +++
 kernel/Makefile            |   2 +
 kernel/shadow_var.c        | 170 +++++++++++++++++++++++++++++++++++++
 3 files changed, 183 insertions(+)
 create mode 100644 include/linux/shadow_var.h
 create mode 100644 kernel/shadow_var.c

diff --git a/include/linux/shadow_var.h b/include/linux/shadow_var.h
new file mode 100644
index 000000000000..ee63a0887037
--- /dev/null
+++ b/include/linux/shadow_var.h
@@ -0,0 +1,11 @@
+#ifndef _LINUX_SHADOW_VAR_H
+#define _LINUX_SHADOW_VAR_H
+
+#include <linux/hashtable.h>
+#include <linux/slab.h>
+
+void *shadow_var_alloc(void *obj, char *var, size_t size, gfp_t gfp);
+void *shadow_var_get(void *obj, char *var);
+void shadow_var_free(void *obj, char *var);
+
+#endif /*_LINUX_SHADOW_VAR_H */
diff --git a/kernel/Makefile b/kernel/Makefile
index 7a63d567fdb5..1df055c0749a 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -117,6 +117,8 @@ obj-$(CONFIG_HAS_IOMEM) += iomem.o
 obj-$(CONFIG_ZONE_DEVICE) += memremap.o
 obj-$(CONFIG_RSEQ) += rseq.o
 
+obj-y += shadow_var.o
+
 $(obj)/configs.o: $(obj)/config_data.h
 
 targets += config_data.gz
diff --git a/kernel/shadow_var.c b/kernel/shadow_var.c
new file mode 100644
index 000000000000..d709ad9c0c8b
--- /dev/null
+++ b/kernel/shadow_var.c
@@ -0,0 +1,170 @@
+/*
+ * Copyright (C) 2014 Josh Poimboeuf <jpoimboe@redhat.com>
+ * Copyright (C) 2014 Seth Jennings <sjenning@redhat.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ */
+
+/*
+ * kpatch shadow variables
+ *
+ * These functions can be used to add new "shadow" fields to existing data
+ * structures.  For example, to allocate a "newpid" variable associated with an
+ * instance of task_struct, and assign it a value of 1000:
+ *
+ * struct task_struct *tsk = current;
+ * int *newpid;
+ * newpid = shadow_var_alloc(tsk, "newpid", sizeof(int), GFP_KERNEL);
+ * if (newpid)
+ * 	*newpid = 1000;
+ *
+ * To retrieve a pointer to the variable:
+ *
+ * struct task_struct *tsk = current;
+ * int *newpid;
+ * newpid = shadow_var_get(tsk, "newpid");
+ * if (newpid)
+ * 	printk("task newpid = %d\n", *newpid); // prints "task newpid = 1000"
+ *
+ * To free it:
+ *
+ * shadow_var_free(tsk, "newpid");
+ */
+
+#include <linux/shadow_var.h>
+
+static DEFINE_HASHTABLE(kpatch_shadow_hash, 12);
+static DEFINE_SPINLOCK(kpatch_shadow_lock);
+
+struct kpatch_shadow {
+	struct hlist_node node;
+	struct rcu_head rcu_head;
+	void *obj;
+	union {
+		char *var; /* assumed to be 4-byte aligned */
+		unsigned long flags;
+	};
+	void *data;
+};
+
+#define SHADOW_FLAG_INPLACE 0x1
+#define SHADOW_FLAG_RESERVED0 0x2 /* reserved for future use */
+
+#define SHADOW_FLAG_MASK 0x3
+#define SHADOW_PTR_MASK (~(SHADOW_FLAG_MASK))
+
+static inline void shadow_set_inplace(struct kpatch_shadow *shadow)
+{
+	shadow->flags |= SHADOW_FLAG_INPLACE;
+}
+
+static inline int shadow_is_inplace(struct kpatch_shadow *shadow)
+{
+	return shadow->flags & SHADOW_FLAG_INPLACE;
+}
+
+static inline char *shadow_var(struct kpatch_shadow *shadow)
+{
+	return (char *)((unsigned long)shadow->var & SHADOW_PTR_MASK);
+}
+
+void *shadow_var_alloc(void *obj, char *var, size_t size, gfp_t gfp)
+{
+	unsigned long flags;
+	struct kpatch_shadow *shadow;
+
+	shadow = kmalloc(sizeof(*shadow), gfp);
+	if (!shadow)
+		return NULL;
+
+	shadow->obj = obj;
+
+	shadow->var = kstrdup(var, gfp);
+	if (!shadow->var) {
+		kfree(shadow);
+		return NULL;
+	}
+
+	if (size <= sizeof(shadow->data)) {
+		shadow->data = &shadow->data;
+		shadow_set_inplace(shadow);
+	} else {
+		shadow->data = kmalloc(size, gfp);
+		if (!shadow->data) {
+			kfree(shadow->var);
+			kfree(shadow);
+			return NULL;
+		}
+	}
+
+	spin_lock_irqsave(&kpatch_shadow_lock, flags);
+	hash_add_rcu(kpatch_shadow_hash, &shadow->node, (unsigned long)obj);
+	spin_unlock_irqrestore(&kpatch_shadow_lock, flags);
+
+	return shadow->data;
+}
+
+static void kpatch_shadow_rcu_free(struct rcu_head *head)
+{
+	struct kpatch_shadow *shadow;
+
+	shadow = container_of(head, struct kpatch_shadow, rcu_head);
+
+	if (!shadow_is_inplace(shadow))
+		kfree(shadow->data);
+	kfree(shadow_var(shadow));
+	kfree(shadow);
+}
+
+void shadow_var_free(void *obj, char *var)
+{
+	unsigned long flags;
+	struct kpatch_shadow *shadow;
+
+	spin_lock_irqsave(&kpatch_shadow_lock, flags);
+
+	hash_for_each_possible(kpatch_shadow_hash, shadow, node,
+			       (unsigned long)obj) {
+		if (shadow->obj == obj && !strcmp(shadow_var(shadow), var)) {
+			hash_del_rcu(&shadow->node);
+			spin_unlock_irqrestore(&kpatch_shadow_lock, flags);
+			call_rcu(&shadow->rcu_head, kpatch_shadow_rcu_free);
+			return;
+		}
+	}
+
+	spin_unlock_irqrestore(&kpatch_shadow_lock, flags);
+}
+
+void *shadow_var_get(void *obj, char *var)
+{
+	struct kpatch_shadow *shadow;
+
+	rcu_read_lock();
+
+	hash_for_each_possible_rcu(kpatch_shadow_hash, shadow, node,
+				   (unsigned long)obj) {
+		if (shadow->obj == obj && !strcmp(shadow_var(shadow), var)) {
+			rcu_read_unlock();
+			if (shadow_is_inplace(shadow))
+				return &(shadow->data);
+
+			return shadow->data;
+		}
+	}
+
+	rcu_read_unlock();
+
+	return NULL;
+}
-- 
2.17.1

