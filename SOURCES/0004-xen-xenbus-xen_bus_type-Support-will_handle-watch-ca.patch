From 20663aec5da862364801f9a813eb2081bdf5c4c8 Mon Sep 17 00:00:00 2001
From: Author Redacted <security@xen.org>
Date: Wed, 9 Dec 2020 11:38:05 +0000
Subject: [PATCH 4/6] xen/xenbus/xen_bus_type: Support will_handle watch
 callback

This commit adds support of the 'will_handle' watch callback for
'xen_bus_type' users.

Signed-off-by: Author Redacted <security@xen.org>
Reviewed-by: Juergen Gross <jgross@suse.com>
---
 drivers/xen/xenbus/xenbus.h       |  5 +++++
 drivers/xen/xenbus/xenbus_probe.c | 24 +++++++++++++++++++++++-
 2 files changed, 28 insertions(+), 1 deletion(-)

diff --git a/drivers/xen/xenbus/xenbus.h b/drivers/xen/xenbus/xenbus.h
index 092981171df1..503a02384b01 100644
--- a/drivers/xen/xenbus/xenbus.h
+++ b/drivers/xen/xenbus/xenbus.h
@@ -49,6 +49,11 @@ struct xen_bus_type {
 	struct bus_type bus;
 };
 
+struct xen_bus_type_extra {
+	bool (*otherend_will_handle)(struct xenbus_watch *watch,
+				     const char *path, const char *token);
+};
+
 enum xenstore_init {
 	XS_UNKNOWN,
 	XS_PV,
diff --git a/drivers/xen/xenbus/xenbus_probe.c b/drivers/xen/xenbus/xenbus_probe.c
index a6e6ddd6b051..90348edb8e7f 100644
--- a/drivers/xen/xenbus/xenbus_probe.c
+++ b/drivers/xen/xenbus/xenbus_probe.c
@@ -49,6 +49,7 @@
 #include <linux/io.h>
 #include <linux/slab.h>
 #include <linux/module.h>
+#include <linux/shadow_var.h>
 
 #include <asm/page.h>
 #include <asm/pgtable.h>
@@ -114,6 +115,7 @@ static void free_otherend_watch(struct xenbus_device *dev)
 		unregister_xenbus_watch(&dev->otherend_watch);
 		kfree(dev->otherend_watch.node);
 		dev->otherend_watch.node = NULL;
+		shadow_var_free(&dev->otherend_watch, "extra");
 	}
 }
 
@@ -134,9 +136,29 @@ static int watch_otherend(struct xenbus_device *dev)
 {
 	struct xen_bus_type *bus =
 		container_of(dev->dev.bus, struct xen_bus_type, bus);
+	struct xen_bus_type_extra *extra_bus = shadow_var_get(bus, "extra");
+	bool (*otherend_will_handle)(struct xenbus_watch *, const char *,
+				     const char *) = NULL;
+
+	if (extra_bus) {
+		struct xenbus_watch_extra *watch_extra;
+
+		watch_extra = shadow_var_alloc(&dev->otherend_watch, "extra",
+						  sizeof(*watch_extra),
+						  GFP_KERNEL);
+		if (!watch_extra)
+		{
+			xenbus_dev_fatal(dev, -ENOMEM,
+					 "allocating extra for watch");
+			return -ENOMEM;
+		}
+
+		otherend_will_handle = extra_bus->otherend_will_handle;
+	}
 
 	return xenbus_watch_pathfmt_abi(dev, &dev->otherend_watch,
-					NULL, bus->otherend_changed,
+					otherend_will_handle,
+					bus->otherend_changed,
 					"%s/%s", dev->otherend, "state");
 }
 
-- 
2.17.1

